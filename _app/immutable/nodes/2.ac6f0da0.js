import{s as x,n as P,r as ee,f as te,d as ne,u as re,g as se,e as ae,o as ie,h as j}from"../chunks/scheduler.f68b563b.js";import{S as z,i as $,g as _,m as Q,s as A,h as N,j as S,n as J,f as g,c as I,k as p,a as T,A as f,B as O,C as B,o as X,D as oe,d as D,t as L,r as G,E as le,u as H,y as ce,v as k,w as V}from"../chunks/index.2bcf3605.js";const de=typeof window<"u"?window:typeof globalThis<"u"?globalThis:global,he=!0,Me=Object.freeze(Object.defineProperty({__proto__:null,prerender:he},Symbol.toStringTag,{value:"Module"}));function ue(a){let t,e,n,r,s,c,d,h,m;return{c(){t=_("div"),e=_("div"),n=Q(a[0]),r=A(),s=_("input"),c=A(),d=_("input"),this.h()},l(u){t=N(u,"DIV",{class:!0});var E=S(t);e=N(E,"DIV",{class:!0});var w=S(e);n=J(w,a[0]),w.forEach(g),r=I(E),s=N(E,"INPUT",{class:!0,type:!0,min:!0,max:!0}),c=I(E),d=N(E,"INPUT",{class:!0,type:!0}),E.forEach(g),this.h()},h(){p(e,"class","slider__label"),p(s,"class","slider__input"),p(s,"type","range"),p(s,"min","0"),p(s,"max","127"),p(d,"class","slider__value"),p(d,"type","text"),p(t,"class","slider")},m(u,E){T(u,t,E),f(t,e),f(e,n),f(t,r),f(t,s),O(s,a[2]),f(t,c),f(t,d),O(d,a[2]),h||(m=[B(s,"input",a[4]),B(s,"change",a[5]),B(s,"input",a[5]),B(d,"input",a[6])],h=!0)},p(u,[E]){E&1&&X(n,u[0]),E&4&&O(s,u[2]),E&4&&d.value!==u[2]&&O(d,u[2])},i:P,o:P,d(u){u&&g(t),h=!1,ee(m)}}}function me(a,t,e){const n=te("sendSysexStringHandler");let r=64,{title:s="A Slider"}=t,{param:c}=t;const d=({target:u})=>{n(c,u.value)};function h(){r=oe(this.value),e(2,r)}function m(){r=this.value,e(2,r)}return a.$$set=u=>{"title"in u&&e(0,s=u.title),"param"in u&&e(1,c=u.param)},[s,c,r,n,d,h,m]}class q extends z{constructor(t){super(),$(this,t,me,ue,x,{title:0,param:1})}}class y{constructor(t=!1){this.eventMap={},this.eventsSuspended=t==1}addListener(t,e,n={}){if(typeof t=="string"&&t.length<1||t instanceof String&&t.length<1||typeof t!="string"&&!(t instanceof String)&&t!==y.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(typeof e!="function")throw new TypeError("The callback must be a function.");const r=new W(t,this,e,n);return this.eventMap[t]||(this.eventMap[t]=[]),n.prepend?this.eventMap[t].unshift(r):this.eventMap[t].push(r),r}addOneTimeListener(t,e,n={}){n.remaining=1,this.addListener(t,e,n)}static get ANY_EVENT(){return Symbol.for("Any event")}hasListener(t,e){return t===void 0?!!(this.eventMap[y.ANY_EVENT]&&this.eventMap[y.ANY_EVENT].length>0)||Object.entries(this.eventMap).some(([,n])=>n.length>0):this.eventMap[t]&&this.eventMap[t].length>0?e instanceof W?this.eventMap[t].filter(n=>n===e).length>0:typeof e=="function"?this.eventMap[t].filter(n=>n.callback===e).length>0:e==null:!1}get eventNames(){return Object.keys(this.eventMap)}getListeners(t){return this.eventMap[t]||[]}suspendEvent(t){this.getListeners(t).forEach(e=>{e.suspended=!0})}unsuspendEvent(t){this.getListeners(t).forEach(e=>{e.suspended=!1})}getListenerCount(t){return this.getListeners(t).length}emit(t,...e){if(typeof t!="string"&&!(t instanceof String))throw new TypeError("The 'event' parameter must be a string.");if(this.eventsSuspended)return;let n=[],r=this.eventMap[y.ANY_EVENT]||[];return this.eventMap[t]&&(r=r.concat(this.eventMap[t])),r.forEach(s=>{if(s.suspended)return;let c=[...e];Array.isArray(s.arguments)&&(c=c.concat(s.arguments)),s.remaining>0&&(n.push(s.callback.apply(s.context,c)),s.count++),--s.remaining<1&&s.remove()}),n}removeListener(t,e,n={}){if(t===void 0)return void(this.eventMap={});if(!this.eventMap[t])return;let r=this.eventMap[t].filter(s=>e&&s.callback!==e||n.remaining&&n.remaining!==s.remaining||n.context&&n.context!==s.context);r.length?this.eventMap[t]=r:delete this.eventMap[t]}async waitFor(t,e={}){return e.duration=parseInt(e.duration),(isNaN(e.duration)||e.duration<=0)&&(e.duration=1/0),new Promise((n,r)=>{let s,c=this.addListener(t,()=>{clearTimeout(s),n()},{remaining:1});e.duration!==1/0&&(s=setTimeout(()=>{c.remove(),r("The duration expired before the event was emitted.")},e.duration))})}get eventCount(){return Object.keys(this.eventMap).length}}class W{constructor(t,e,n,r={}){if(typeof t!="string"&&!(t instanceof String)&&t!==y.ANY_EVENT)throw new TypeError("The 'event' parameter must be a string or EventEmitter.ANY_EVENT.");if(!e)throw new ReferenceError("The 'target' parameter is mandatory.");if(typeof n!="function")throw new TypeError("The 'callback' must be a function.");r.arguments===void 0||Array.isArray(r.arguments)||(r.arguments=[r.arguments]),(r=Object.assign({context:e,remaining:1/0,arguments:void 0,duration:1/0},r)).duration!==1/0&&setTimeout(()=>this.remove(),r.duration),this.arguments=r.arguments,this.callback=n,this.context=r.context,this.count=0,this.event=t,this.remaining=parseInt(r.remaining)>=1?parseInt(r.remaining):1/0,this.suspended=!1,this.target=e}remove(){this.target.removeListener(this.event,this.callback,{context:this.context,remaining:this.remaining})}}/**
 * The `Enumerations` class contains enumerations and arrays of elements used throughout the
 * library. All its properties are static and should be referenced using the class name. For
 * example: `Enumerations.CHANNEL_MESSAGES`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class i{static get MIDI_CHANNEL_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MESSAGES enum instead."),i.CHANNEL_MESSAGES}static get CHANNEL_MESSAGES(){return{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,programchange:12,channelaftertouch:13,pitchbend:14}}static get CHANNEL_NUMBERS(){return[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get MIDI_CHANNEL_NUMBERS(){return this.validation&&console.warn("The MIDI_CHANNEL_NUMBERS array has been deprecated. Use the Enumerations.CHANNEL_NUMBERS array instead."),[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]}static get CHANNEL_MODE_MESSAGES(){return{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been deprecated. Use the Enumerations.CHANNEL_MODE_MESSAGES enum instead."),i.CHANNEL_MODE_MESSAGES}static get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been deprecated. Use the Enumerations.CONTROL_CHANGE_MESSAGES array instead."),{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,controller3:3,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,controller9:9,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,controller14:14,controller15:15,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,controller20:20,controller21:21,controller22:22,controller23:23,controller24:24,controller25:25,controller26:26,controller27:27,controller28:28,controller29:29,controller30:30,controller31:31,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,controller35:35,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,controller41:41,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,controller46:46,controller47:47,controller48:48,controller49:49,controller50:50,controller51:51,controller52:52,controller53:53,controller54:54,controller55:55,controller56:56,controller57:57,controller58:58,controller59:59,controller60:60,controller61:61,controller62:62,controller63:63,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,controller84:84,controller85:85,controller86:86,controller87:87,controller88:88,controller89:89,controller90:90,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101,controller102:102,controller103:103,controller104:104,controller105:105,controller106:106,controller107:107,controller108:108,controller109:109,controller110:110,controller111:111,controller112:112,controller113:113,controller114:114,controller115:115,controller116:116,controller117:117,controller118:118,controller119:119,allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127}}static get CONTROL_CHANGE_MESSAGES(){return[{number:0,name:"bankselectcoarse",description:"Bank Select (Coarse)",position:"msb"},{number:1,name:"modulationwheelcoarse",description:"Modulation Wheel (Coarse)",position:"msb"},{number:2,name:"breathcontrollercoarse",description:"Breath Controller (Coarse)",position:"msb"},{number:3,name:"controller3",description:"Undefined",position:"msb"},{number:4,name:"footcontrollercoarse",description:"Foot Controller (Coarse)",position:"msb"},{number:5,name:"portamentotimecoarse",description:"Portamento Time (Coarse)",position:"msb"},{number:6,name:"dataentrycoarse",description:"Data Entry (Coarse)",position:"msb"},{number:7,name:"volumecoarse",description:"Channel Volume (Coarse)",position:"msb"},{number:8,name:"balancecoarse",description:"Balance (Coarse)",position:"msb"},{number:9,name:"controller9",description:"Controller 9 (Coarse)",position:"msb"},{number:10,name:"pancoarse",description:"Pan (Coarse)",position:"msb"},{number:11,name:"expressioncoarse",description:"Expression Controller (Coarse)",position:"msb"},{number:12,name:"effectcontrol1coarse",description:"Effect Control 1 (Coarse)",position:"msb"},{number:13,name:"effectcontrol2coarse",description:"Effect Control 2 (Coarse)",position:"msb"},{number:14,name:"controller14",description:"Undefined",position:"msb"},{number:15,name:"controller15",description:"Undefined",position:"msb"},{number:16,name:"generalpurposecontroller1",description:"General Purpose Controller 1 (Coarse)",position:"msb"},{number:17,name:"generalpurposecontroller2",description:"General Purpose Controller 2 (Coarse)",position:"msb"},{number:18,name:"generalpurposecontroller3",description:"General Purpose Controller 3 (Coarse)",position:"msb"},{number:19,name:"generalpurposecontroller4",description:"General Purpose Controller 4 (Coarse)",position:"msb"},{number:20,name:"controller20",description:"Undefined",position:"msb"},{number:21,name:"controller21",description:"Undefined",position:"msb"},{number:22,name:"controller22",description:"Undefined",position:"msb"},{number:23,name:"controller23",description:"Undefined",position:"msb"},{number:24,name:"controller24",description:"Undefined",position:"msb"},{number:25,name:"controller25",description:"Undefined",position:"msb"},{number:26,name:"controller26",description:"Undefined",position:"msb"},{number:27,name:"controller27",description:"Undefined",position:"msb"},{number:28,name:"controller28",description:"Undefined",position:"msb"},{number:29,name:"controller29",description:"Undefined",position:"msb"},{number:30,name:"controller30",description:"Undefined",position:"msb"},{number:31,name:"controller31",description:"Undefined",position:"msb"},{number:32,name:"bankselectfine",description:"Bank Select (Fine)",position:"lsb"},{number:33,name:"modulationwheelfine",description:"Modulation Wheel (Fine)",position:"lsb"},{number:34,name:"breathcontrollerfine",description:"Breath Controller (Fine)",position:"lsb"},{number:35,name:"controller35",description:"Undefined",position:"lsb"},{number:36,name:"footcontrollerfine",description:"Foot Controller (Fine)",position:"lsb"},{number:37,name:"portamentotimefine",description:"Portamento Time (Fine)",position:"lsb"},{number:38,name:"dataentryfine",description:"Data Entry (Fine)",position:"lsb"},{number:39,name:"channelvolumefine",description:"Channel Volume (Fine)",position:"lsb"},{number:40,name:"balancefine",description:"Balance (Fine)",position:"lsb"},{number:41,name:"controller41",description:"Undefined",position:"lsb"},{number:42,name:"panfine",description:"Pan (Fine)",position:"lsb"},{number:43,name:"expressionfine",description:"Expression Controller (Fine)",position:"lsb"},{number:44,name:"effectcontrol1fine",description:"Effect control 1 (Fine)",position:"lsb"},{number:45,name:"effectcontrol2fine",description:"Effect control 2 (Fine)",position:"lsb"},{number:46,name:"controller46",description:"Undefined",position:"lsb"},{number:47,name:"controller47",description:"Undefined",position:"lsb"},{number:48,name:"controller48",description:"General Purpose Controller 1 (Fine)",position:"lsb"},{number:49,name:"controller49",description:"General Purpose Controller 2 (Fine)",position:"lsb"},{number:50,name:"controller50",description:"General Purpose Controller 3 (Fine)",position:"lsb"},{number:51,name:"controller51",description:"General Purpose Controller 4 (Fine)",position:"lsb"},{number:52,name:"controller52",description:"Undefined",position:"lsb"},{number:53,name:"controller53",description:"Undefined",position:"lsb"},{number:54,name:"controller54",description:"Undefined",position:"lsb"},{number:55,name:"controller55",description:"Undefined",position:"lsb"},{number:56,name:"controller56",description:"Undefined",position:"lsb"},{number:57,name:"controller57",description:"Undefined",position:"lsb"},{number:58,name:"controller58",description:"Undefined",position:"lsb"},{number:59,name:"controller59",description:"Undefined",position:"lsb"},{number:60,name:"controller60",description:"Undefined",position:"lsb"},{number:61,name:"controller61",description:"Undefined",position:"lsb"},{number:62,name:"controller62",description:"Undefined",position:"lsb"},{number:63,name:"controller63",description:"Undefined",position:"lsb"},{number:64,name:"damperpedal",description:"Damper Pedal On/Off"},{number:65,name:"portamento",description:"Portamento On/Off"},{number:66,name:"sostenuto",description:"Sostenuto On/Off"},{number:67,name:"softpedal",description:"Soft Pedal On/Off"},{number:68,name:"legatopedal",description:"Legato Pedal On/Off"},{number:69,name:"hold2",description:"Hold 2 On/Off"},{number:70,name:"soundvariation",description:"Sound Variation",position:"lsb"},{number:71,name:"resonance",description:"Resonance",position:"lsb"},{number:72,name:"releasetime",description:"Release Time",position:"lsb"},{number:73,name:"attacktime",description:"Attack Time",position:"lsb"},{number:74,name:"brightness",description:"Brightness",position:"lsb"},{number:75,name:"decaytime",description:"Decay Time",position:"lsb"},{number:76,name:"vibratorate",description:"Vibrato Rate",position:"lsb"},{number:77,name:"vibratodepth",description:"Vibrato Depth",position:"lsb"},{number:78,name:"vibratodelay",description:"Vibrato Delay",position:"lsb"},{number:79,name:"controller79",description:"Undefined",position:"lsb"},{number:80,name:"generalpurposecontroller5",description:"General Purpose Controller 5",position:"lsb"},{number:81,name:"generalpurposecontroller6",description:"General Purpose Controller 6",position:"lsb"},{number:82,name:"generalpurposecontroller7",description:"General Purpose Controller 7",position:"lsb"},{number:83,name:"generalpurposecontroller8",description:"General Purpose Controller 8",position:"lsb"},{number:84,name:"portamentocontrol",description:"Portamento Control",position:"lsb"},{number:85,name:"controller85",description:"Undefined"},{number:86,name:"controller86",description:"Undefined"},{number:87,name:"controller87",description:"Undefined"},{number:88,name:"highresolutionvelocityprefix",description:"High Resolution Velocity Prefix",position:"lsb"},{number:89,name:"controller89",description:"Undefined"},{number:90,name:"controller90",description:"Undefined"},{number:91,name:"effect1depth",description:"Effects 1 Depth (Reverb Send Level)"},{number:92,name:"effect2depth",description:"Effects 2 Depth"},{number:93,name:"effect3depth",description:"Effects 3 Depth (Chorus Send Level)"},{number:94,name:"effect4depth",description:"Effects 4 Depth"},{number:95,name:"effect5depth",description:"Effects 5 Depth"},{number:96,name:"dataincrement",description:"Data Increment"},{number:97,name:"datadecrement",description:"Data Decrement"},{number:98,name:"nonregisteredparameterfine",description:"Non-Registered Parameter Number (Fine)",position:"lsb"},{number:99,name:"nonregisteredparametercoarse",description:"Non-Registered Parameter Number (Coarse)",position:"msb"},{number:100,name:"registeredparameterfine",description:"Registered Parameter Number (Fine)",position:"lsb"},{number:101,name:"registeredparametercoarse",description:"Registered Parameter Number (Coarse)",position:"msb"},{number:102,name:"controller102",description:"Undefined"},{number:103,name:"controller103",description:"Undefined"},{number:104,name:"controller104",description:"Undefined"},{number:105,name:"controller105",description:"Undefined"},{number:106,name:"controller106",description:"Undefined"},{number:107,name:"controller107",description:"Undefined"},{number:108,name:"controller108",description:"Undefined"},{number:109,name:"controller109",description:"Undefined"},{number:110,name:"controller110",description:"Undefined"},{number:111,name:"controller111",description:"Undefined"},{number:112,name:"controller112",description:"Undefined"},{number:113,name:"controller113",description:"Undefined"},{number:114,name:"controller114",description:"Undefined"},{number:115,name:"controller115",description:"Undefined"},{number:116,name:"controller116",description:"Undefined"},{number:117,name:"controller117",description:"Undefined"},{number:118,name:"controller118",description:"Undefined"},{number:119,name:"controller119",description:"Undefined"},{number:120,name:"allsoundoff",description:"All Sound Off"},{number:121,name:"resetallcontrollers",description:"Reset All Controllers"},{number:122,name:"localcontrol",description:"Local Control On/Off"},{number:123,name:"allnotesoff",description:"All Notes Off"},{number:124,name:"omnimodeoff",description:"Omni Mode Off"},{number:125,name:"omnimodeon",description:"Omni Mode On"},{number:126,name:"monomodeon",description:"Mono Mode On"},{number:127,name:"polymodeon",description:"Poly Mode On"}]}static get REGISTERED_PARAMETERS(){return{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]}}static get MIDI_REGISTERED_PARAMETERS(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETERS enum has been deprecated. Use the Enumerations.REGISTERED_PARAMETERS enum instead."),i.MIDI_REGISTERED_PARAMETERS}static get SYSTEM_MESSAGES(){return{sysex:240,timecode:241,songposition:242,songselect:243,tunerequest:246,tuningrequest:246,sysexend:247,clock:248,start:250,continue:251,stop:252,activesensing:254,reset:255,midimessage:0,unknownsystemmessage:-1}}static get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been deprecated. Use the Enumerations.SYSTEM_MESSAGES enum instead."),i.SYSTEM_MESSAGES}static get CHANNEL_EVENTS(){return["noteoff","controlchange","noteon","keyaftertouch","programchange","channelaftertouch","pitchbend","allnotesoff","allsoundoff","localcontrol","monomode","omnimode","resetallcontrollers","nrpn","nrpn-dataentrycoarse","nrpn-dataentryfine","nrpn-dataincrement","nrpn-datadecrement","rpn","rpn-dataentrycoarse","rpn-dataentryfine","rpn-dataincrement","rpn-datadecrement","nrpn-databuttonincrement","nrpn-databuttondecrement","rpn-databuttonincrement","rpn-databuttondecrement"]}}/**
 * The `Note` class represents a single musical note such as `"D3"`, `"G#4"`, `"F-1"`, `"Gb7"`, etc.
 *
 * `Note` objects can be played back on a single channel by calling
 * [`OutputChannel.playNote()`]{@link OutputChannel#playNote} or, on multiple channels of the same
 * output, by calling [`Output.playNote()`]{@link Output#playNote}.
 *
 * The note has [`attack`](#attack) and [`release`](#release) velocities set at `0.5` by default.
 * These can be changed by passing in the appropriate option. It is also possible to set a
 * system-wide default for attack and release velocities by using the
 * [`WebMidi.defaults`](WebMidi#defaults) property.
 *
 * If you prefer to work with raw MIDI values (`0` to `127`), you can use [`rawAttack`](#rawAttack) and
 * [`rawRelease`](#rawRelease) to both get and set the values.
 *
 * The note may have a [`duration`](#duration). If it does, playback will be automatically stopped
 * when the duration has elapsed by sending a `"noteoff"` event. By default, the duration is set to
 * `Infinity`. In this case, it will never stop playing unless explicitly stopped by calling a
 * method such as [`OutputChannel.stopNote()`]{@link OutputChannel#stopNote},
 * [`Output.stopNote()`]{@link Output#stopNote} or similar.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class C{constructor(t,e={}){this.duration=o.defaults.note.duration,this.attack=o.defaults.note.attack,this.release=o.defaults.note.release,e.duration!=null&&(this.duration=e.duration),e.attack!=null&&(this.attack=e.attack),e.rawAttack!=null&&(this.attack=l.from7bitToFloat(e.rawAttack)),e.release!=null&&(this.release=e.release),e.rawRelease!=null&&(this.release=l.from7bitToFloat(e.rawRelease)),Number.isInteger(t)?this.identifier=l.toNoteIdentifier(t):this.identifier=t}get identifier(){return this._name+(this._accidental||"")+this._octave}set identifier(t){const e=l.getNoteDetails(t);if(o.validation&&!t)throw new Error("Invalid note identifier");this._name=e.name,this._accidental=e.accidental,this._octave=e.octave}get name(){return this._name}set name(t){if(o.validation&&(t=t.toUpperCase(),!["C","D","E","F","G","A","B"].includes(t)))throw new Error("Invalid name value");this._name=t}get accidental(){return this._accidental}set accidental(t){if(o.validation&&(t=t.toLowerCase(),!["#","##","b","bb"].includes(t)))throw new Error("Invalid accidental value");this._accidental=t}get octave(){return this._octave}set octave(t){if(o.validation&&(t=parseInt(t),isNaN(t)))throw new Error("Invalid octave value");this._octave=t}get duration(){return this._duration}set duration(t){if(o.validation&&(t=parseFloat(t),isNaN(t)||t===null||t<0))throw new RangeError("Invalid duration value.");this._duration=t}get attack(){return this._attack}set attack(t){if(o.validation&&(t=parseFloat(t),isNaN(t)||!(t>=0&&t<=1)))throw new RangeError("Invalid attack value.");this._attack=t}get release(){return this._release}set release(t){if(o.validation&&(t=parseFloat(t),isNaN(t)||!(t>=0&&t<=1)))throw new RangeError("Invalid release value.");this._release=t}get rawAttack(){return l.fromFloatTo7Bit(this._attack)}set rawAttack(t){this._attack=l.from7bitToFloat(t)}get rawRelease(){return l.fromFloatTo7Bit(this._release)}set rawRelease(t){this._release=l.from7bitToFloat(t)}get number(){return l.toNoteNumber(this.identifier)}getOffsetNumber(t=0,e=0){return o.validation&&(t=parseInt(t)||0,e=parseInt(e)||0),Math.min(Math.max(this.number+12*t+e,0),127)}}/**
 * The `Utilities` class contains general-purpose utility methods. All methods are static and
 * should be called using the class name. For example: `Utilities.getNoteDetails("C4")`.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class l{static toNoteNumber(t,e=0){if(e=e==null?0:parseInt(e),isNaN(e))throw new RangeError("Invalid 'octaveOffset' value");typeof t!="string"&&(t="");const n=this.getNoteDetails(t);if(!n)throw new TypeError("Invalid note identifier");let r=12*(n.octave+1+e);if(r+={C:0,D:2,E:4,F:5,G:7,A:9,B:11}[n.name],n.accidental&&(n.accidental.startsWith("b")?r-=n.accidental.length:r+=n.accidental.length),r<0||r>127)throw new RangeError("Invalid octaveOffset value");return r}static getNoteDetails(t){Number.isInteger(t)&&(t=this.toNoteIdentifier(t));const e=t.match(/^([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)$/i);if(!e)throw new TypeError("Invalid note identifier");const n=e[1].toUpperCase(),r=parseInt(e[3]);let s=e[2].toLowerCase();return s=s===""?void 0:s,{accidental:s,identifier:n+(s||"")+r,name:n,octave:r}}static sanitizeChannels(t){let e;if(o.validation){if(t==="all")e=["all"];else if(t==="none")return[]}return e=Array.isArray(t)?t:[t],e.indexOf("all")>-1&&(e=i.MIDI_CHANNEL_NUMBERS),e.map(function(n){return parseInt(n)}).filter(function(n){return n>=1&&n<=16})}static toTimestamp(t){let e=!1;const n=parseFloat(t);return!isNaN(n)&&(typeof t=="string"&&t.substring(0,1)==="+"?n>=0&&(e=o.time+n):n>=0&&(e=n),e)}static guessNoteNumber(t,e){e=parseInt(e)||0;let n=!1;if(Number.isInteger(t)&&t>=0&&t<=127)n=parseInt(t);else if(parseInt(t)>=0&&parseInt(t)<=127)n=parseInt(t);else if(typeof t=="string"||t instanceof String)try{n=this.toNoteNumber(t.trim(),e)}catch{return!1}return n}static toNoteIdentifier(t,e){if(t=parseInt(t),isNaN(t)||t<0||t>127)throw new RangeError("Invalid note number");if(e=e==null?0:parseInt(e),isNaN(e))throw new RangeError("Invalid octaveOffset value");const n=Math.floor(t/12-1)+e;return["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][t%12]+n.toString()}static buildNote(t,e={}){if(e.octaveOffset=parseInt(e.octaveOffset)||0,t instanceof C)return t;let n=this.guessNoteNumber(t,e.octaveOffset);if(n===!1)throw new TypeError(`The input could not be parsed as a note (${t})`);return e.octaveOffset=void 0,new C(n,e)}static buildNoteArray(t,e={}){let n=[];return Array.isArray(t)||(t=[t]),t.forEach(r=>{n.push(this.buildNote(r,e))}),n}static from7bitToFloat(t){return t===1/0&&(t=127),t=parseInt(t)||0,Math.min(Math.max(t/127,0),1)}static fromFloatTo7Bit(t){return t===1/0&&(t=1),t=parseFloat(t)||0,Math.min(Math.max(Math.round(127*t),0),127)}static fromMsbLsbToFloat(t,e=0){o.validation&&(t=Math.min(Math.max(parseInt(t)||0,0),127),e=Math.min(Math.max(parseInt(e)||0,0),127));const n=((t<<7)+e)/16383;return Math.min(Math.max(n,0),1)}static fromFloatToMsbLsb(t){o.validation&&(t=Math.min(Math.max(parseFloat(t)||0,0),1));const e=Math.round(16383*t);return{msb:e>>7,lsb:127&e}}static offsetNumber(t,e=0,n=0){if(o.validation){if(t=parseInt(t),isNaN(t))throw new Error("Invalid note number");e=parseInt(e)||0,n=parseInt(n)||0}return Math.min(Math.max(t+12*e+n,0),127)}static getPropertyByValue(t,e){return Object.keys(t).find(n=>t[n]===e)}static getCcNameByNumber(t){if(!o.validation||(t=parseInt(t))>=0&&t<=127)return i.CONTROL_CHANGE_MESSAGES[t].name}static getCcNumberByName(t){let e=i.CONTROL_CHANGE_MESSAGES.find(n=>n.name===t);return e?e.number:i.MIDI_CONTROL_CHANGE_MESSAGES[t]}static getChannelModeByNumber(t){if(!(t>=120&&t<=127))return!1;for(let e in i.CHANNEL_MODE_MESSAGES)if(i.CHANNEL_MODE_MESSAGES.hasOwnProperty(e)&&t===i.CHANNEL_MODE_MESSAGES[e])return e;return!1}static get isNode(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null}static get isBrowser(){return typeof window<"u"&&window.document!==void 0}}/**
 * The `OutputChannel` class represents a single output MIDI channel. `OutputChannel` objects are
 * provided by an [`Output`](Output) port which, itself, is made available by a device. The
 * `OutputChannel` object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `OutputChannel` objects can be found inside the parent output's
 * [`channels`]{@link Output#channels} property.
 *
 * @param {Output} output The [`Output`](Output) this channel belongs to.
 * @param {number} number The MIDI channel number (`1` - `16`).
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class pe extends y{constructor(t,e){super(),this._output=t,this._number=e,this._octaveOffset=0}destroy(){this._output=null,this._number=null,this._octaveOffset=0,this.removeListener()}send(t,e={time:0}){return this.output.send(t,e),this}sendKeyAftertouch(t,e,n={}){if(o.validation){if(n.useRawValue&&(n.rawValue=n.useRawValue),isNaN(parseFloat(e)))throw new RangeError("Invalid key aftertouch value.");if(n.rawValue){if(!(e>=0&&e<=127&&Number.isInteger(e)))throw new RangeError("Key aftertouch raw value must be an integer between 0 and 127.")}else if(!(e>=0&&e<=1))throw new RangeError("Key aftertouch value must be a float between 0 and 1.")}n.rawValue||(e=l.fromFloatTo7Bit(e));const r=o.octaveOffset+this.output.octaveOffset+this.octaveOffset;return Array.isArray(t)||(t=[t]),l.buildNoteArray(t).forEach(s=>{this.send([(i.CHANNEL_MESSAGES.keyaftertouch<<4)+(this.number-1),s.getOffsetNumber(r),e],{time:l.toTimestamp(n.time)})}),this}sendControlChange(t,e,n={}){if(typeof t=="string"&&(t=l.getCcNumberByName(t)),Array.isArray(e)||(e=[e]),o.validation){if(t===void 0)throw new TypeError("Control change must be identified with a valid name or an integer between 0 and 127.");if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new TypeError("Control change number must be an integer between 0 and 127.");if((e=e.map(r=>{const s=Math.min(Math.max(parseInt(r),0),127);if(isNaN(s))throw new TypeError("Values must be integers between 0 and 127");return s})).length===2&&t>=32)throw new TypeError("To use a value array, the controller must be between 0 and 31")}return e.forEach((r,s)=>{this.send([(i.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),t+32*s,e[s]],{time:l.toTimestamp(n.time)})}),this}_selectNonRegisteredParameter(t,e={}){return this.sendControlChange(99,t[0],e),this.sendControlChange(98,t[1],e),this}_deselectRegisteredParameter(t={}){return this.sendControlChange(101,127,t),this.sendControlChange(100,127,t),this}_deselectNonRegisteredParameter(t={}){return this.sendControlChange(101,127,t),this.sendControlChange(100,127,t),this}_selectRegisteredParameter(t,e={}){return this.sendControlChange(101,t[0],e),this.sendControlChange(100,t[1],e),this}_setCurrentParameter(t,e={}){return t=[].concat(t),this.sendControlChange(6,t[0],e),t.length<2||this.sendControlChange(38,t[1],e),this}sendRpnDecrement(t,e={}){if(Array.isArray(t)||(t=i.REGISTERED_PARAMETERS[t]),o.validation){if(t===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(i.REGISTERED_PARAMETERS).forEach(r=>{i.REGISTERED_PARAMETERS[r][0]===t[0]&&i.REGISTERED_PARAMETERS[r][1]===t[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(t,e),this.sendControlChange(97,0,e),this._deselectRegisteredParameter(e),this}sendRpnIncrement(t,e={}){if(Array.isArray(t)||(t=i.REGISTERED_PARAMETERS[t]),o.validation){if(t===void 0)throw new TypeError("The specified registered parameter is invalid.");let n=!1;if(Object.getOwnPropertyNames(i.REGISTERED_PARAMETERS).forEach(r=>{i.REGISTERED_PARAMETERS[r][0]===t[0]&&i.REGISTERED_PARAMETERS[r][1]===t[1]&&(n=!0)}),!n)throw new TypeError("The specified registered parameter is invalid.")}return this._selectRegisteredParameter(t,e),this.sendControlChange(96,0,e),this._deselectRegisteredParameter(e),this}playNote(t,e={}){this.sendNoteOn(t,e);const n=Array.isArray(t)?t:[t];for(let r of n)if(parseInt(r.duration)>0){const s={time:(l.toTimestamp(e.time)||o.time)+parseInt(r.duration),release:r.release,rawRelease:r.rawRelease};this.sendNoteOff(r,s)}else if(parseInt(e.duration)>0){const s={time:(l.toTimestamp(e.time)||o.time)+parseInt(e.duration),release:e.release,rawRelease:e.rawRelease};this.sendNoteOff(r,s)}return this}sendNoteOff(t,e={}){if(o.validation){if(e.rawRelease!=null&&!(e.rawRelease>=0&&e.rawRelease<=127))throw new RangeError("The 'rawRelease' option must be an integer between 0 and 127");if(e.release!=null&&!(e.release>=0&&e.release<=1))throw new RangeError("The 'release' option must be an number between 0 and 1");e.rawVelocity&&(e.rawRelease=e.velocity,console.warn("The 'rawVelocity' option is deprecated. Use 'rawRelease' instead.")),e.velocity&&(e.release=e.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;e.rawRelease!=null?n=e.rawRelease:isNaN(e.release)||(n=Math.round(127*e.release));const r=o.octaveOffset+this.output.octaveOffset+this.octaveOffset;return l.buildNoteArray(t,{rawRelease:parseInt(n)}).forEach(s=>{this.send([(i.CHANNEL_MESSAGES.noteoff<<4)+(this.number-1),s.getOffsetNumber(r),s.rawRelease],{time:l.toTimestamp(e.time)})}),this}stopNote(t,e={}){return this.sendNoteOff(t,e)}sendNoteOn(t,e={}){if(o.validation){if(e.rawAttack!=null&&!(e.rawAttack>=0&&e.rawAttack<=127))throw new RangeError("The 'rawAttack' option must be an integer between 0 and 127");if(e.attack!=null&&!(e.attack>=0&&e.attack<=1))throw new RangeError("The 'attack' option must be an number between 0 and 1");e.rawVelocity&&(e.rawAttack=e.velocity,e.rawRelease=e.release,console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' or 'rawRelease'.")),e.velocity&&(e.attack=e.velocity,console.warn("The 'velocity' option is deprecated. Use 'attack' instead."))}let n=64;e.rawAttack!=null?n=e.rawAttack:isNaN(e.attack)||(n=Math.round(127*e.attack));const r=o.octaveOffset+this.output.octaveOffset+this.octaveOffset;return l.buildNoteArray(t,{rawAttack:n}).forEach(s=>{this.send([(i.CHANNEL_MESSAGES.noteon<<4)+(this.number-1),s.getOffsetNumber(r),s.rawAttack],{time:l.toTimestamp(e.time)})}),this}sendChannelMode(t,e=0,n={}){if(typeof t=="string"&&(t=i.CHANNEL_MODE_MESSAGES[t]),o.validation){if(t===void 0)throw new TypeError("Invalid channel mode message name or number.");if(isNaN(t)||!(t>=120&&t<=127))throw new TypeError("Invalid channel mode message number.");if(isNaN(parseInt(e))||e<0||e>127)throw new RangeError("Value must be an integer between 0 and 127.")}return this.send([(i.CHANNEL_MESSAGES.controlchange<<4)+(this.number-1),t,e],{time:l.toTimestamp(n.time)}),this}sendOmniMode(t,e={}){return t===void 0||t?this.sendChannelMode("omnimodeon",0,e):this.sendChannelMode("omnimodeoff",0,e),this}sendChannelAftertouch(t,e={}){if(o.validation){if(isNaN(parseFloat(t)))throw new RangeError("Invalid channel aftertouch value.");if(e.rawValue){if(!(t>=0&&t<=127&&Number.isInteger(t)))throw new RangeError("Channel aftertouch raw value must be an integer between 0 and 127.")}else if(!(t>=0&&t<=1))throw new RangeError("Channel aftertouch value must be a float between 0 and 1.")}return e.rawValue||(t=l.fromFloatTo7Bit(t)),this.send([(i.CHANNEL_MESSAGES.channelaftertouch<<4)+(this.number-1),Math.round(t)],{time:l.toTimestamp(e.time)}),this}sendMasterTuning(t,e={}){if(t=parseFloat(t)||0,o.validation&&!(t>-65&&t<64))throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");let n=Math.floor(t)+64,r=t-Math.floor(t);r=Math.round((r+1)/2*16383);let s=r>>7&127,c=127&r;return this.sendRpnValue("channelcoarsetuning",n,e),this.sendRpnValue("channelfinetuning",[s,c],e),this}sendModulationRange(t,e,n={}){if(o.validation){if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!(e==null||Number.isInteger(e)&&e>=0&&e<=127))throw new RangeError("If specified, the cents value must be an integer between 0 and 127.")}return e>=0&&e<=127||(e=0),this.sendRpnValue("modulationrange",[t,e],n),this}sendNrpnValue(t,e,n={}){if(e=[].concat(e),o.validation){if(!Array.isArray(t)||!Number.isInteger(t[0])||!Number.isInteger(t[1]))throw new TypeError("The specified NRPN is invalid.");if(!(t[0]>=0&&t[0]<=127))throw new RangeError("The first byte of the NRPN must be between 0 and 127.");if(!(t[1]>=0&&t[1]<=127))throw new RangeError("The second byte of the NRPN must be between 0 and 127.");e.forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the NRPN must be between 0 and 127.")})}return this._selectNonRegisteredParameter(t,n),this._setCurrentParameter(e,n),this._deselectNonRegisteredParameter(n),this}sendPitchBend(t,e={}){if(o.validation)if(e.rawValue&&Array.isArray(t)){if(!(t[0]>=0&&t[0]<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.");if(!(t[1]>=0&&t[1]<=127))throw new RangeError("The pitch bend LSB must be an integer between 0 and 127.")}else if(e.rawValue&&!Array.isArray(t)){if(!(t>=0&&t<=127))throw new RangeError("The pitch bend MSB must be an integer between 0 and 127.")}else{if(isNaN(t)||t===null)throw new RangeError("Invalid pitch bend value.");if(!(t>=-1&&t<=1))throw new RangeError("The pitch bend value must be a float between -1 and 1.")}let n=0,r=0;if(e.rawValue&&Array.isArray(t))n=t[0],r=t[1];else if(e.rawValue&&!Array.isArray(t))n=t;else{const s=l.fromFloatToMsbLsb((t+1)/2);n=s.msb,r=s.lsb}return this.send([(i.CHANNEL_MESSAGES.pitchbend<<4)+(this.number-1),r,n],{time:l.toTimestamp(e.time)}),this}sendPitchBendRange(t,e,n={}){if(o.validation){if(!Number.isInteger(t)||!(t>=0&&t<=127))throw new RangeError("The semitones value must be an integer between 0 and 127.");if(!Number.isInteger(e)||!(e>=0&&e<=127))throw new RangeError("The cents value must be an integer between 0 and 127.")}return this.sendRpnValue("pitchbendrange",[t,e],n),this}sendProgramChange(t,e={}){if(t=parseInt(t)||0,o.validation&&!(t>=0&&t<=127))throw new RangeError("The program number must be between 0 and 127.");return this.send([(i.CHANNEL_MESSAGES.programchange<<4)+(this.number-1),t],{time:l.toTimestamp(e.time)}),this}sendRpnValue(t,e,n={}){if(Array.isArray(t)||(t=i.REGISTERED_PARAMETERS[t]),o.validation){if(!Number.isInteger(t[0])||!Number.isInteger(t[1]))throw new TypeError("The specified NRPN is invalid.");if(!(t[0]>=0&&t[0]<=127))throw new RangeError("The first byte of the RPN must be between 0 and 127.");if(!(t[1]>=0&&t[1]<=127))throw new RangeError("The second byte of the RPN must be between 0 and 127.");[].concat(e).forEach(r=>{if(!(r>=0&&r<=127))throw new RangeError("The data bytes of the RPN must be between 0 and 127.")})}return this._selectRegisteredParameter(t,n),this._setCurrentParameter(e,n),this._deselectRegisteredParameter(n),this}sendTuningBank(t,e={}){if(o.validation&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("The tuning bank number must be between 0 and 127.");return this.sendRpnValue("tuningbank",t,e),this}sendTuningProgram(t,e={}){if(o.validation&&(!Number.isInteger(t)||!(t>=0&&t<=127)))throw new RangeError("The tuning program number must be between 0 and 127.");return this.sendRpnValue("tuningprogram",t,e),this}sendLocalControl(t,e={}){return t?this.sendChannelMode("localcontrol",127,e):this.sendChannelMode("localcontrol",0,e)}sendAllNotesOff(t={}){return this.sendChannelMode("allnotesoff",0,t)}sendAllSoundOff(t={}){return this.sendChannelMode("allsoundoff",0,t)}sendResetAllControllers(t={}){return this.sendChannelMode("resetallcontrollers",0,t)}sendPolyphonicMode(t,e={}){return t==="mono"?this.sendChannelMode("monomodeon",0,e):this.sendChannelMode("polymodeon",0,e)}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}get output(){return this._output}get number(){return this._number}}/**
 * The `Output` class represents a single MIDI output port (not to be confused with a MIDI channel).
 * A port is made available by a MIDI device. A MIDI device can advertise several input and output
 * ports. Each port has 16 MIDI channels which can be accessed via the [`channels`](#channels)
 * property.
 *
 * The `Output` object is automatically instantiated by the library according to the host's MIDI
 * subsystem and should not be directly instantiated.
 *
 * You can access all available `Output` objects by referring to the
 * [`WebMidi.outputs`](WebMidi#outputs) array or by using methods such as
 * [`WebMidi.getOutputByName()`](WebMidi#getOutputByName) or
 * [`WebMidi.getOutputById()`](WebMidi#getOutputById).
 *
 * @fires Output#opened
 * @fires Output#disconnected
 * @fires Output#closed
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class F extends y{constructor(t){super(),this._midiOutput=t,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new pe(this,e);this._midiOutput.onstatechange=this._onStateChange.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(t=>t.destroy()),this.channels=[],this._midiOutput&&(this._midiOutput.onstatechange=null),await this.close(),this._midiOutput=null}_onStateChange(t){let e={timestamp:o.time};t.port.connection==="open"?(e.type="opened",e.target=this,e.port=e.target,this.emit("opened",e)):t.port.connection==="closed"&&t.port.state==="connected"?(e.type="closed",e.target=this,e.port=e.target,this.emit("closed",e)):t.port.connection==="closed"&&t.port.state==="disconnected"?(e.type="disconnected",e.port={connection:t.port.connection,id:t.port.id,manufacturer:t.port.manufacturer,name:t.port.name,state:t.port.state,type:t.port.type},this.emit("disconnected",e)):t.port.connection==="pending"&&t.port.state==="disconnected"||console.warn("This statechange event was not caught:",t.port.connection,t.port.state)}async open(){try{return await this._midiOutput.open(),Promise.resolve(this)}catch(t){return Promise.reject(t)}}async close(){this._midiOutput?await this._midiOutput.close():await Promise.resolve()}send(t,e={time:0},n=0){if(t instanceof Z&&(t=l.isNode?t.data:t.rawData),t instanceof Uint8Array&&l.isNode&&(t=Array.from(t)),o.validation){if(Array.isArray(t)||t instanceof Uint8Array||(t=[t],Array.isArray(e)&&(t=t.concat(e)),e=isNaN(n)?{time:0}:{time:n}),!(parseInt(t[0])>=128&&parseInt(t[0])<=255))throw new RangeError("The first byte (status) must be an integer between 128 and 255.");t.slice(1).forEach(r=>{if(!((r=parseInt(r))>=0&&r<=255))throw new RangeError("Data bytes must be integers between 0 and 255.")}),e||(e={time:0})}return this._midiOutput.send(t,l.toTimestamp(e.time)),this}sendSysex(t,e=[],n={}){if(t=[].concat(t),e instanceof Uint8Array){const r=new Uint8Array(1+t.length+e.length+1);r[0]=i.SYSTEM_MESSAGES.sysex,r.set(Uint8Array.from(t),1),r.set(e,1+t.length),r[r.length-1]=i.SYSTEM_MESSAGES.sysexend,this.send(r,{time:n.time})}else{const r=t.concat(e,i.SYSTEM_MESSAGES.sysexend);this.send([i.SYSTEM_MESSAGES.sysex].concat(r),{time:n.time})}return this}clear(){return this._midiOutput.clear?this._midiOutput.clear():o.validation&&console.warn("The 'clear()' method has not yet been implemented in your environment."),this}sendTimecodeQuarterFrame(t,e={}){if(o.validation&&(t=parseInt(t),isNaN(t)||!(t>=0&&t<=127)))throw new RangeError("The value must be an integer between 0 and 127.");return this.send([i.SYSTEM_MESSAGES.timecode,t],{time:e.time}),this}sendSongPosition(t=0,e={}){var n=(t=Math.floor(t)||0)>>7&127,r=127&t;return this.send([i.SYSTEM_MESSAGES.songposition,n,r],{time:e.time}),this}sendSongSelect(t=0,e={}){if(o.validation&&(t=parseInt(t),isNaN(t)||!(t>=0&&t<=127)))throw new RangeError("The program value must be between 0 and 127");return this.send([i.SYSTEM_MESSAGES.songselect,t],{time:e.time}),this}sendTuneRequest(t={}){return this.send([i.SYSTEM_MESSAGES.tunerequest],{time:t.time}),this}sendClock(t={}){return this.send([i.SYSTEM_MESSAGES.clock],{time:t.time}),this}sendStart(t={}){return this.send([i.SYSTEM_MESSAGES.start],{time:t.time}),this}sendContinue(t={}){return this.send([i.SYSTEM_MESSAGES.continue],{time:t.time}),this}sendStop(t={}){return this.send([i.SYSTEM_MESSAGES.stop],{time:t.time}),this}sendActiveSensing(t={}){return this.send([i.SYSTEM_MESSAGES.activesensing],{time:t.time}),this}sendReset(t={}){return this.send([i.SYSTEM_MESSAGES.reset],{time:t.time}),this}sendTuningRequest(t={}){return o.validation&&console.warn("The sendTuningRequest() method has been deprecated. Use sendTuningRequest() instead."),this.sendTuneRequest(t)}sendKeyAftertouch(t,e,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendKeyAftertouch(t,e,n)}),this}sendControlChange(t,e,n={},r={}){if(o.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;(n=r).channels=s,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendControlChange(t,e,n)}),this}sendPitchBendRange(t=0,e=0,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendPitchBendRange(t,e,n)}),this}setPitchBendRange(t=0,e=0,n="all",r={}){return o.validation&&(console.warn("The setPitchBendRange() method is deprecated. Use sendPitchBendRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendPitchBendRange(t,e,r)}sendRpnValue(t,e,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendRpnValue(t,e,n)}),this}setRegisteredParameter(t,e=[],n="all",r={}){return o.validation&&(console.warn("The setRegisteredParameter() method is deprecated. Use sendRpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnValue(t,e,r)}sendChannelAftertouch(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendChannelAftertouch(t,e)}),this}sendPitchBend(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendPitchBend(t,e)}),this}sendProgramChange(t=0,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendProgramChange(t,e)}),this}sendModulationRange(t,e,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendModulationRange(t,e,n)}),this}setModulationRange(t=0,e=0,n="all",r={}){return o.validation&&(console.warn("The setModulationRange() method is deprecated. Use sendModulationRange() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendModulationRange(t,e,r)}sendMasterTuning(t,e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendMasterTuning(t,e)}),this}setMasterTuning(t,e={},n={}){return o.validation&&(console.warn("The setMasterTuning() method is deprecated. Use sendMasterTuning() instead."),n.channels=e,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendMasterTuning(t,n)}sendTuningProgram(t,e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendTuningProgram(t,e)}),this}setTuningProgram(t,e="all",n={}){return o.validation&&(console.warn("The setTuningProgram() method is deprecated. Use sendTuningProgram() instead."),n.channels=e,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendTuningProgram(t,n)}sendTuningBank(t=0,e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendTuningBank(t,e)}),this}setTuningBank(t,e="all",n={}){return o.validation&&(console.warn("The setTuningBank() method is deprecated. Use sendTuningBank() instead."),n.channels=e,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendTuningBank(t,n)}sendChannelMode(t,e=0,n={},r={}){if(o.validation&&(Array.isArray(n)||Number.isInteger(n)||n==="all")){const s=n;(n=r).channels=s,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)}return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(s=>{this.channels[s].sendChannelMode(t,e,n)}),this}sendAllSoundOff(t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(t.channels).forEach(e=>{this.channels[e].sendAllSoundOff(t)}),this}sendAllNotesOff(t={}){return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(t.channels).forEach(e=>{this.channels[e].sendAllNotesOff(t)}),this}sendResetAllControllers(t={},e={}){if(o.validation&&(Array.isArray(t)||Number.isInteger(t)||t==="all")){const n=t;(t=e).channels=n,t.channels==="all"&&(t.channels=i.MIDI_CHANNEL_NUMBERS)}return t.channels==null&&(t.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(t.channels).forEach(n=>{this.channels[n].sendResetAllControllers(t)}),this}sendPolyphonicMode(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendPolyphonicMode(t,e)}),this}sendLocalControl(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendLocalControl(t,e)}),this}sendOmniMode(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendOmniMode(t,e)}),this}sendNrpnValue(t,e,n={}){return n.channels==null&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].sendNrpnValue(t,e,n)}),this}setNonRegisteredParameter(t,e=[],n="all",r={}){return o.validation&&(console.warn("The setNonRegisteredParameter() method is deprecated. Use sendNrpnValue() instead."),r.channels=n,r.channels==="all"&&(r.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendNrpnValue(t,e,r)}sendRpnIncrement(t,e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendRpnIncrement(t,e)}),this}incrementRegisteredParameter(t,e="all",n={}){return o.validation&&(console.warn("The incrementRegisteredParameter() method is deprecated. Use sendRpnIncrement() instead."),n.channels=e,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnIncrement(t,n)}sendRpnDecrement(t,e={}){return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(n=>{this.channels[n].sendRpnDecrement(t,e)}),this}decrementRegisteredParameter(t,e="all",n={}){return o.validation&&(console.warn("The decrementRegisteredParameter() method is deprecated. Use sendRpnDecrement() instead."),n.channels=e,n.channels==="all"&&(n.channels=i.MIDI_CHANNEL_NUMBERS)),this.sendRpnDecrement(t,n)}sendNoteOff(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendNoteOff(t,e)}),this}stopNote(t,e){return this.sendNoteOff(t,e)}playNote(t,e={},n={}){if(o.validation&&(e.rawVelocity&&console.warn("The 'rawVelocity' option is deprecated. Use 'rawAttack' instead."),e.velocity&&console.warn("The 'velocity' option is deprecated. Use 'velocity' instead."),Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].playNote(t,e)}),this}sendNoteOn(t,e={},n={}){if(o.validation&&(Array.isArray(e)||Number.isInteger(e)||e==="all")){const r=e;(e=n).channels=r,e.channels==="all"&&(e.channels=i.MIDI_CHANNEL_NUMBERS)}return e.channels==null&&(e.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(e.channels).forEach(r=>{this.channels[r].sendNoteOn(t,e)}),this}get name(){return this._midiOutput.name}get id(){return this._midiOutput.id}get connection(){return this._midiOutput.connection}get manufacturer(){return this._midiOutput.manufacturer}get state(){return this._midiOutput.state}get type(){return this._midiOutput.type}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}}/**
 * The `Forwarder` class allows the forwarding of MIDI messages to predetermined outputs. When you
 * call its [`forward()`](#forward) method, it will send the specified [`Message`](Message) object
 * to all the outputs listed in its [`destinations`](#destinations) property.
 *
 * If specific channels or message types have been defined in the [`channels`](#channels) or
 * [`types`](#types) properties, only messages matching the channels/types will be forwarded.
 *
 * While it can be manually instantiated, you are more likely to come across a `Forwarder` object as
 * the return value of the [`Input.addForwarder()`](Input#addForwarder) method.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class K{constructor(t=[],e={}){this.destinations=[],this.types=[...Object.keys(i.SYSTEM_MESSAGES),...Object.keys(i.CHANNEL_MESSAGES)],this.channels=i.MIDI_CHANNEL_NUMBERS,this.suspended=!1,Array.isArray(t)||(t=[t]),e.types&&!Array.isArray(e.types)&&(e.types=[e.types]),e.channels&&!Array.isArray(e.channels)&&(e.channels=[e.channels]),o.validation&&(t.forEach(n=>{if(!(n instanceof F))throw new TypeError("Destinations must be of type 'Output'.")}),e.types!==void 0&&e.types.forEach(n=>{if(!i.SYSTEM_MESSAGES.hasOwnProperty(n)&&!i.CHANNEL_MESSAGES.hasOwnProperty(n))throw new TypeError("Type must be a valid message type.")}),e.channels!==void 0&&e.channels.forEach(n=>{if(!i.MIDI_CHANNEL_NUMBERS.includes(n))throw new TypeError("MIDI channel must be between 1 and 16.")})),this.destinations=t,e.types&&(this.types=e.types),e.channels&&(this.channels=e.channels)}forward(t){this.suspended||this.types.includes(t.type)&&(t.channel&&!this.channels.includes(t.channel)||this.destinations.forEach(e=>{(!o.validation||e instanceof F)&&e.send(t)}))}}/**
 * The `InputChannel` class represents a single MIDI input channel (1-16) from a single input
 * device. This object is derived from the host's MIDI subsystem and should not be instantiated
 * directly.
 *
 * All 16 `InputChannel` objects can be found inside the input's [`channels`](Input#channels)
 * property.
 *
 * @fires InputChannel#midimessage
 * @fires InputChannel#unknownmessage
 *
 * @fires InputChannel#noteoff
 * @fires InputChannel#noteon
 * @fires InputChannel#keyaftertouch
 * @fires InputChannel#programchange
 * @fires InputChannel#channelaftertouch
 * @fires InputChannel#pitchbend
 *
 * @fires InputChannel#allnotesoff
 * @fires InputChannel#allsoundoff
 * @fires InputChannel#localcontrol
 * @fires InputChannel#monomode
 * @fires InputChannel#omnimode
 * @fires InputChannel#resetallcontrollers
 *
 * @fires InputChannel#event:nrpn
 * @fires InputChannel#event:nrpn-dataentrycoarse
 * @fires InputChannel#event:nrpn-dataentryfine
 * @fires InputChannel#event:nrpn-dataincrement
 * @fires InputChannel#event:nrpn-datadecrement
 * @fires InputChannel#event:rpn
 * @fires InputChannel#event:rpn-dataentrycoarse
 * @fires InputChannel#event:rpn-dataentryfine
 * @fires InputChannel#event:rpn-dataincrement
 * @fires InputChannel#event:rpn-datadecrement
 *
 * @fires InputChannel#controlchange
 * @fires InputChannel#event:controlchange-controllerxxx
 * @fires InputChannel#event:controlchange-bankselectcoarse
 * @fires InputChannel#event:controlchange-modulationwheelcoarse
 * @fires InputChannel#event:controlchange-breathcontrollercoarse
 * @fires InputChannel#event:controlchange-footcontrollercoarse
 * @fires InputChannel#event:controlchange-portamentotimecoarse
 * @fires InputChannel#event:controlchange-dataentrycoarse
 * @fires InputChannel#event:controlchange-volumecoarse
 * @fires InputChannel#event:controlchange-balancecoarse
 * @fires InputChannel#event:controlchange-pancoarse
 * @fires InputChannel#event:controlchange-expressioncoarse
 * @fires InputChannel#event:controlchange-effectcontrol1coarse
 * @fires InputChannel#event:controlchange-effectcontrol2coarse
 * @fires InputChannel#event:controlchange-generalpurposecontroller1
 * @fires InputChannel#event:controlchange-generalpurposecontroller2
 * @fires InputChannel#event:controlchange-generalpurposecontroller3
 * @fires InputChannel#event:controlchange-generalpurposecontroller4
 * @fires InputChannel#event:controlchange-bankselectfine
 * @fires InputChannel#event:controlchange-modulationwheelfine
 * @fires InputChannel#event:controlchange-breathcontrollerfine
 * @fires InputChannel#event:controlchange-footcontrollerfine
 * @fires InputChannel#event:controlchange-portamentotimefine
 * @fires InputChannel#event:controlchange-dataentryfine
 * @fires InputChannel#event:controlchange-channelvolumefine
 * @fires InputChannel#event:controlchange-balancefine
 * @fires InputChannel#event:controlchange-panfine
 * @fires InputChannel#event:controlchange-expressionfine
 * @fires InputChannel#event:controlchange-effectcontrol1fine
 * @fires InputChannel#event:controlchange-effectcontrol2fine
 * @fires InputChannel#event:controlchange-damperpedal
 * @fires InputChannel#event:controlchange-portamento
 * @fires InputChannel#event:controlchange-sostenuto
 * @fires InputChannel#event:controlchange-softpedal
 * @fires InputChannel#event:controlchange-legatopedal
 * @fires InputChannel#event:controlchange-hold2
 * @fires InputChannel#event:controlchange-soundvariation
 * @fires InputChannel#event:controlchange-resonance
 * @fires InputChannel#event:controlchange-releasetime
 * @fires InputChannel#event:controlchange-attacktime
 * @fires InputChannel#event:controlchange-brightness
 * @fires InputChannel#event:controlchange-decaytime
 * @fires InputChannel#event:controlchange-vibratorate
 * @fires InputChannel#event:controlchange-vibratodepth
 * @fires InputChannel#event:controlchange-vibratodelay
 * @fires InputChannel#event:controlchange-generalpurposecontroller5
 * @fires InputChannel#event:controlchange-generalpurposecontroller6
 * @fires InputChannel#event:controlchange-generalpurposecontroller7
 * @fires InputChannel#event:controlchange-generalpurposecontroller8
 * @fires InputChannel#event:controlchange-portamentocontrol
 * @fires InputChannel#event:controlchange-highresolutionvelocityprefix
 * @fires InputChannel#event:controlchange-effect1depth
 * @fires InputChannel#event:controlchange-effect2depth
 * @fires InputChannel#event:controlchange-effect3depth
 * @fires InputChannel#event:controlchange-effect4depth
 * @fires InputChannel#event:controlchange-effect5depth
 * @fires InputChannel#event:controlchange-dataincrement
 * @fires InputChannel#event:controlchange-datadecrement
 * @fires InputChannel#event:controlchange-nonregisteredparameterfine
 * @fires InputChannel#event:controlchange-nonregisteredparametercoarse
 * @fires InputChannel#event:controlchange-registeredparameterfine
 * @fires InputChannel#event:controlchange-registeredparametercoarse
 * @fires InputChannel#event:controlchange-allsoundoff
 * @fires InputChannel#event:controlchange-resetallcontrollers
 * @fires InputChannel#event:controlchange-localcontrol
 * @fires InputChannel#event:controlchange-allnotesoff
 * @fires InputChannel#event:controlchange-omnimodeoff
 * @fires InputChannel#event:controlchange-omnimodeon
 * @fires InputChannel#event:controlchange-monomodeon
 * @fires InputChannel#event:controlchange-polymodeon
 * @fires InputChannel#event:
 *
 * @extends EventEmitter
 * @license Apache-2.0
 * @since 3.0.0
 */class fe extends y{constructor(t,e){super(),this._input=t,this._number=e,this._octaveOffset=0,this._nrpnBuffer=[],this._rpnBuffer=[],this.parameterNumberEventsEnabled=!0,this.notesState=new Array(128).fill(!1)}destroy(){this._input=null,this._number=null,this._octaveOffset=0,this._nrpnBuffer=[],this.notesState=new Array(128).fill(!1),this.parameterNumberEventsEnabled=!1,this.removeListener()}_processMidiMessageEvent(t){const e=Object.assign({},t);e.port=this.input,e.target=this,e.type="midimessage",this.emit(e.type,e),this._parseEventForStandardMessages(e)}_parseEventForStandardMessages(t){const e=Object.assign({},t);e.type=e.message.type||"unknownmessage";const n=t.message.dataBytes[0],r=t.message.dataBytes[1];if(e.type==="noteoff"||e.type==="noteon"&&r===0)this.notesState[n]=!1,e.type="noteoff",e.note=new C(l.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+o.octaveOffset),{rawAttack:0,rawRelease:r}),e.value=l.from7bitToFloat(r),e.rawValue=r,e.velocity=e.note.release,e.rawVelocity=e.note.rawRelease;else if(e.type==="noteon")this.notesState[n]=!0,e.note=new C(l.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+o.octaveOffset),{rawAttack:r}),e.value=l.from7bitToFloat(r),e.rawValue=r,e.velocity=e.note.attack,e.rawVelocity=e.note.rawAttack;else if(e.type==="keyaftertouch")e.note=new C(l.offsetNumber(n,this.octaveOffset+this.input.octaveOffset+o.octaveOffset)),e.value=l.from7bitToFloat(r),e.rawValue=r,e.identifier=e.note.identifier,e.key=e.note.number,e.rawKey=n;else if(e.type==="controlchange"){e.controller={number:n,name:i.CONTROL_CHANGE_MESSAGES[n].name,description:i.CONTROL_CHANGE_MESSAGES[n].description,position:i.CONTROL_CHANGE_MESSAGES[n].position},e.subtype=e.controller.name||"controller"+n,e.value=l.from7bitToFloat(r),e.rawValue=r;const s=Object.assign({},e);s.type=`${e.type}-controller${n}`,delete s.subtype,this.emit(s.type,s);const c=Object.assign({},e);c.type=e.type+"-"+i.CONTROL_CHANGE_MESSAGES[n].name,delete c.subtype,c.type.indexOf("controller")!==0&&this.emit(c.type,c),e.message.dataBytes[0]>=120&&this._parseChannelModeMessage(e),this.parameterNumberEventsEnabled&&this._isRpnOrNrpnController(e.message.dataBytes[0])&&this._parseEventForParameterNumber(e)}else e.type==="programchange"?(e.value=n,e.rawValue=e.value):e.type==="channelaftertouch"?(e.value=l.from7bitToFloat(n),e.rawValue=n):e.type==="pitchbend"?(e.value=((r<<7)+n-8192)/8192,e.rawValue=(r<<7)+n):e.type="unknownmessage";this.emit(e.type,e)}_parseChannelModeMessage(t){const e=Object.assign({},t);e.type=e.controller.name,e.type==="localcontrol"&&(e.value=e.message.data[2]===127,e.rawValue=e.message.data[2]),e.type==="omnimodeon"?(e.type="omnimode",e.value=!0,e.rawValue=e.message.data[2]):e.type==="omnimodeoff"&&(e.type="omnimode",e.value=!1,e.rawValue=e.message.data[2]),e.type==="monomodeon"?(e.type="monomode",e.value=!0,e.rawValue=e.message.data[2]):e.type==="polymodeon"&&(e.type="monomode",e.value=!1,e.rawValue=e.message.data[2]),this.emit(e.type,e)}_parseEventForParameterNumber(t){const e=t.message.dataBytes[0],n=t.message.dataBytes[1];e===99||e===101?(this._nrpnBuffer=[],this._rpnBuffer=[],e===99?this._nrpnBuffer=[t.message]:n!==127&&(this._rpnBuffer=[t.message])):e===98||e===100?e===98?(this._rpnBuffer=[],this._nrpnBuffer.length===1?this._nrpnBuffer.push(t.message):this._nrpnBuffer=[]):(this._nrpnBuffer=[],this._rpnBuffer.length===1&&n!==127?this._rpnBuffer.push(t.message):this._rpnBuffer=[]):e!==6&&e!==38&&e!==96&&e!==97||(this._rpnBuffer.length===2?this._dispatchParameterNumberEvent("rpn",this._rpnBuffer[0].dataBytes[1],this._rpnBuffer[1].dataBytes[1],t):this._nrpnBuffer.length===2?this._dispatchParameterNumberEvent("nrpn",this._nrpnBuffer[0].dataBytes[1],this._nrpnBuffer[1].dataBytes[1],t):(this._nrpnBuffer=[],this._rpnBuffer=[]))}_isRpnOrNrpnController(t){return t===6||t===38||t===96||t===97||t===98||t===99||t===100||t===101}_dispatchParameterNumberEvent(t,e,n,r){t=t==="nrpn"?"nrpn":"rpn";const s={target:r.target,timestamp:r.timestamp,message:r.message,parameterMsb:e,parameterLsb:n,value:l.from7bitToFloat(r.message.dataBytes[1]),rawValue:r.message.dataBytes[1]};s.parameter=t==="rpn"?Object.keys(i.REGISTERED_PARAMETERS).find(h=>i.REGISTERED_PARAMETERS[h][0]===e&&i.REGISTERED_PARAMETERS[h][1]===n):(e<<7)+n;const c=i.CONTROL_CHANGE_MESSAGES[r.message.dataBytes[0]].name;s.type=`${t}-${c}`,this.emit(s.type,s);const d=Object.assign({},s);d.type==="nrpn-dataincrement"?d.type="nrpn-databuttonincrement":d.type==="nrpn-datadecrement"?d.type="nrpn-databuttondecrement":d.type==="rpn-dataincrement"?d.type="rpn-databuttonincrement":d.type==="rpn-datadecrement"&&(d.type="rpn-databuttondecrement"),this.emit(d.type,d),s.type=t,s.subtype=c,this.emit(s.type,s)}getChannelModeByNumber(t){return o.validation&&(console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class."),t=Math.floor(t)),l.getChannelModeByNumber(t)}getCcNameByNumber(t){if(o.validation&&(console.warn("The 'getCcNameByNumber()' method has been moved to the 'Utilities' class."),!((t=parseInt(t))>=0&&t<=127)))throw new RangeError("Invalid control change number.");return l.getCcNameByNumber(t)}getNoteState(t){t instanceof C&&(t=t.identifier);const e=l.guessNoteNumber(t,o.octaveOffset+this.input.octaveOffset+this.octaveOffset);return this.notesState[e]}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}get input(){return this._input}get number(){return this._number}get nrpnEventsEnabled(){return this.parameterNumberEventsEnabled}set nrpnEventsEnabled(t){this.validation&&(t=!!t),this.parameterNumberEventsEnabled=t}}/**
 * The `Message` class represents a single MIDI message. It has several properties that make it
 * easy to make sense of the binary data it contains.
 *
 * @license Apache-2.0
 * @since 3.0.0
 */class Z{constructor(t){this.rawData=t,this.data=Array.from(this.rawData),this.statusByte=this.rawData[0],this.rawDataBytes=this.rawData.slice(1),this.dataBytes=this.data.slice(1),this.isChannelMessage=!1,this.isSystemMessage=!1,this.command=void 0,this.channel=void 0,this.manufacturerId=void 0,this.type=void 0,this.statusByte<240?(this.isChannelMessage=!0,this.command=this.statusByte>>4,this.channel=1+(15&this.statusByte)):(this.isSystemMessage=!0,this.command=this.statusByte),this.isChannelMessage?this.type=l.getPropertyByValue(i.CHANNEL_MESSAGES,this.command):this.isSystemMessage&&(this.type=l.getPropertyByValue(i.SYSTEM_MESSAGES,this.command)),this.statusByte===i.SYSTEM_MESSAGES.sysex&&(this.dataBytes[0]===0?(this.manufacturerId=this.dataBytes.slice(0,3),this.dataBytes=this.dataBytes.slice(3,this.rawDataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(3,this.rawDataBytes.length-1)):(this.manufacturerId=[this.dataBytes[0]],this.dataBytes=this.dataBytes.slice(1,this.dataBytes.length-1),this.rawDataBytes=this.rawDataBytes.slice(1,this.rawDataBytes.length-1)))}}/**
 * The `Input` class represents a single MIDI input port. This object is automatically instantiated
 * by the library according to the host's MIDI subsystem and does not need to be directly
 * instantiated. Instead, you can access all `Input` objects by referring to the
 * [`WebMidi.inputs`](WebMidi#inputs) array. You can also retrieve inputs by using methods such as
 * [`WebMidi.getInputByName()`](WebMidi#getInputByName) and
 * [`WebMidi.getInputById()`](WebMidi#getInputById).
 *
 * Note that a single MIDI device may expose several inputs and/or outputs.
 *
 * **Important**: the `Input` class does not directly fire channel-specific MIDI messages
 * (such as [`noteon`](InputChannel#event:noteon) or
 * [`controlchange`](InputChannel#event:controlchange), etc.). The [`InputChannel`](InputChannel)
 * object does that. However, you can still use the
 * [`Input.addListener()`](#addListener) method to listen to channel-specific events on multiple
 * [`InputChannel`](InputChannel) objects at once.
 *
 * @fires Input#opened
 * @fires Input#disconnected
 * @fires Input#closed
 * @fires Input#midimessage
 *
 * @fires Input#sysex
 * @fires Input#timecode
 * @fires Input#songposition
 * @fires Input#songselect
 * @fires Input#tunerequest
 * @fires Input#clock
 * @fires Input#start
 * @fires Input#continue
 * @fires Input#stop
 * @fires Input#activesensing
 * @fires Input#reset
 *
 * @fires Input#unknownmidimessage
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */class Ee extends y{constructor(t){super(),this._midiInput=t,this._octaveOffset=0,this.channels=[];for(let e=1;e<=16;e++)this.channels[e]=new fe(this,e);this._forwarders=[],this._midiInput.onstatechange=this._onStateChange.bind(this),this._midiInput.onmidimessage=this._onMidiMessage.bind(this)}async destroy(){this.removeListener(),this.channels.forEach(t=>t.destroy()),this.channels=[],this._forwarders=[],this._midiInput&&(this._midiInput.onstatechange=null,this._midiInput.onmidimessage=null),await this.close(),this._midiInput=null}_onStateChange(t){let e={timestamp:o.time,target:this,port:this};t.port.connection==="open"?(e.type="opened",this.emit("opened",e)):t.port.connection==="closed"&&t.port.state==="connected"?(e.type="closed",this.emit("closed",e)):t.port.connection==="closed"&&t.port.state==="disconnected"?(e.type="disconnected",e.port={connection:t.port.connection,id:t.port.id,manufacturer:t.port.manufacturer,name:t.port.name,state:t.port.state,type:t.port.type},this.emit("disconnected",e)):t.port.connection==="pending"&&t.port.state==="disconnected"||console.warn("This statechange event was not caught: ",t.port.connection,t.port.state)}_onMidiMessage(t){const e=new Z(t.data),n={port:this,target:this,message:e,timestamp:t.timeStamp,type:"midimessage",data:e.data,rawData:e.data,statusByte:e.data[0],dataBytes:e.dataBytes};this.emit("midimessage",n),e.isSystemMessage?this._parseEvent(n):e.isChannelMessage&&this.channels[e.channel]._processMidiMessageEvent(n),this._forwarders.forEach(r=>r.forward(e))}_parseEvent(t){const e=Object.assign({},t);e.type=e.message.type||"unknownmidimessage",e.type==="songselect"&&(e.song=t.data[1]+1,e.value=t.data[1],e.rawValue=e.value),this.emit(e.type,e)}async open(){try{await this._midiInput.open()}catch(t){return Promise.reject(t)}return Promise.resolve(this)}async close(){if(!this._midiInput)return Promise.resolve(this);try{await this._midiInput.close()}catch(t){return Promise.reject(t)}return Promise.resolve(this)}getChannelModeByNumber(){o.validation&&console.warn("The 'getChannelModeByNumber()' method has been moved to the 'Utilities' class.")}addListener(t,e,n={}){if(o.validation&&typeof n=="function"){let r=e!=null?[].concat(e):void 0;e=n,n={channels:r}}if(i.CHANNEL_EVENTS.includes(t)){n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS);let r=[];return l.sanitizeChannels(n.channels).forEach(s=>{r.push(this.channels[s].addListener(t,e,n))}),r}return super.addListener(t,e,n)}addOneTimeListener(t,e,n={}){return n.remaining=1,this.addListener(t,e,n)}on(t,e,n,r){return this.addListener(t,e,n,r)}hasListener(t,e,n={}){if(o.validation&&typeof n=="function"){let r=[].concat(e);e=n,n={channels:r}}return i.CHANNEL_EVENTS.includes(t)?(n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS),l.sanitizeChannels(n.channels).every(r=>this.channels[r].hasListener(t,e))):super.hasListener(t,e)}removeListener(t,e,n={}){if(o.validation&&typeof n=="function"){let r=[].concat(e);e=n,n={channels:r}}if(n.channels===void 0&&(n.channels=i.MIDI_CHANNEL_NUMBERS),t==null)return l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r]&&this.channels[r].removeListener()}),super.removeListener();i.CHANNEL_EVENTS.includes(t)?l.sanitizeChannels(n.channels).forEach(r=>{this.channels[r].removeListener(t,e,n)}):super.removeListener(t,e,n)}addForwarder(t,e={}){let n;return n=t instanceof K?t:new K(t,e),this._forwarders.push(n),n}removeForwarder(t){this._forwarders=this._forwarders.filter(e=>e!==t)}hasForwarder(t){return this._forwarders.includes(t)}get name(){return this._midiInput.name}get id(){return this._midiInput.id}get connection(){return this._midiInput.connection}get manufacturer(){return this._midiInput.manufacturer}get octaveOffset(){return this._octaveOffset}set octaveOffset(t){if(this.validation&&(t=parseInt(t),isNaN(t)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=t}get state(){return this._midiInput.state}get type(){return this._midiInput.type}get nrpnEventsEnabled(){return o.validation&&console.warn("The 'nrpnEventsEnabled' property has been moved to the 'InputChannel' class."),!1}}/**
 * The `WebMidi` object makes it easier to work with the low-level Web MIDI API. Basically, it
 * simplifies sending outgoing MIDI messages and reacting to incoming MIDI messages.
 *
 * When using the WebMidi.js library, you should know that the `WebMidi` class has already been
 * instantiated. You cannot instantiate it yourself. If you use the **IIFE** version, you should
 * simply use the global object called `WebMidi`. If you use the **CJS** (CommonJS) or **ESM** (ES6
 * module) version, you get an already-instantiated object when you import the module.
 *
 * @fires WebMidi#connected
 * @fires WebMidi#disabled
 * @fires WebMidi#disconnected
 * @fires WebMidi#enabled
 * @fires WebMidi#error
 * @fires WebMidi#midiaccessgranted
 * @fires WebMidi#portschanged
 *
 * @extends EventEmitter
 * @license Apache-2.0
 */const o=new class extends y{constructor(){super(),this.defaults={note:{attack:l.from7bitToFloat(64),release:l.from7bitToFloat(64),duration:1/0}},this.interface=null,this.validation=!0,this._inputs=[],this._disconnectedInputs=[],this._outputs=[],this._disconnectedOutputs=[],this._stateChangeQueue=[],this._octaveOffset=0}async enable(a={},t=!1){if(l.isNode){try{window.navigator}catch{let c=await Object.getPrototypeOf(async function(){}).constructor(`
        let jzz = await import("jzz");
        return jzz.default;
        `)();global.navigator||(global.navigator={}),Object.assign(global.navigator,c)}try{}catch{global.performance=await Object.getPrototypeOf(async function(){}).constructor(`
        let perf_hooks = await import("perf_hooks");
        return perf_hooks.performance;
        `)()}}if(this.validation=a.validation!==!1,this.validation&&(typeof a=="function"&&(a={callback:a,sysex:t}),t&&(a.sysex=!0)),this.enabled)return typeof a.callback=="function"&&a.callback(),Promise.resolve();const e={timestamp:this.time,target:this,type:"error",error:void 0},n={timestamp:this.time,target:this,type:"midiaccessgranted"},r={timestamp:this.time,target:this,type:"enabled"};try{typeof a.requestMIDIAccessFunction=="function"?this.interface=await a.requestMIDIAccessFunction({sysex:a.sysex,software:a.software}):this.interface=await navigator.requestMIDIAccess({sysex:a.sysex,software:a.software})}catch(s){return e.error=s,this.emit("error",e),typeof a.callback=="function"&&a.callback(s),Promise.reject(s)}this.emit("midiaccessgranted",n),this.interface.onstatechange=this._onInterfaceStateChange.bind(this);try{await this._updateInputsAndOutputs()}catch(s){return e.error=s,this.emit("error",e),typeof a.callback=="function"&&a.callback(s),Promise.reject(s)}return this.emit("enabled",r),typeof a.callback=="function"&&a.callback(),Promise.resolve(this)}async disable(){return this.interface&&(this.interface.onstatechange=void 0),this._destroyInputsAndOutputs().then(()=>{navigator&&typeof navigator.close=="function"&&navigator.close(),this.interface=null;let a={timestamp:this.time,target:this,type:"disabled"};this.emit("disabled",a),this.removeListener()})}getInputById(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return}if(t.disconnected){for(let e=0;e<this._disconnectedInputs.length;e++)if(this._disconnectedInputs[e].id===a.toString())return this._disconnectedInputs[e]}else for(let e=0;e<this.inputs.length;e++)if(this.inputs[e].id===a.toString())return this.inputs[e]}getInputByName(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return;a=a.toString()}if(t.disconnected){for(let e=0;e<this._disconnectedInputs.length;e++)if(~this._disconnectedInputs[e].name.indexOf(a))return this._disconnectedInputs[e]}else for(let e=0;e<this.inputs.length;e++)if(~this.inputs[e].name.indexOf(a))return this.inputs[e]}getOutputByName(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return;a=a.toString()}if(t.disconnected){for(let e=0;e<this._disconnectedOutputs.length;e++)if(~this._disconnectedOutputs[e].name.indexOf(a))return this._disconnectedOutputs[e]}else for(let e=0;e<this.outputs.length;e++)if(~this.outputs[e].name.indexOf(a))return this.outputs[e]}getOutputById(a,t={disconnected:!1}){if(this.validation){if(!this.enabled)throw new Error("WebMidi is not enabled.");if(!a)return}if(t.disconnected){for(let e=0;e<this._disconnectedOutputs.length;e++)if(this._disconnectedOutputs[e].id===a.toString())return this._disconnectedOutputs[e]}else for(let e=0;e<this.outputs.length;e++)if(this.outputs[e].id===a.toString())return this.outputs[e]}noteNameToNumber(a){return this.validation&&console.warn("The noteNameToNumber() method is deprecated. Use Utilities.toNoteNumber() instead."),l.toNoteNumber(a,this.octaveOffset)}getOctave(a){return this.validation&&(console.warn("The getOctave()is deprecated. Use Utilities.getNoteDetails() instead"),a=parseInt(a)),!isNaN(a)&&a>=0&&a<=127&&l.getNoteDetails(l.offsetNumber(a,this.octaveOffset)).octave}sanitizeChannels(a){return this.validation&&console.warn("The sanitizeChannels() method has been moved to the utilities class."),l.sanitizeChannels(a)}toMIDIChannels(a){return this.validation&&console.warn("The toMIDIChannels() method has been deprecated. Use Utilities.sanitizeChannels() instead."),l.sanitizeChannels(a)}guessNoteNumber(a){return this.validation&&console.warn("The guessNoteNumber() method has been deprecated. Use Utilities.guessNoteNumber() instead."),l.guessNoteNumber(a,this.octaveOffset)}getValidNoteArray(a,t={}){return this.validation&&console.warn("The getValidNoteArray() method has been moved to the Utilities.buildNoteArray()"),l.buildNoteArray(a,t)}convertToTimestamp(a){return this.validation&&console.warn("The convertToTimestamp() method has been moved to Utilities.toTimestamp()."),l.toTimestamp(a)}async _destroyInputsAndOutputs(){let a=[];return this.inputs.forEach(t=>a.push(t.destroy())),this.outputs.forEach(t=>a.push(t.destroy())),Promise.all(a).then(()=>{this._inputs=[],this._outputs=[]})}_onInterfaceStateChange(a){this._updateInputsAndOutputs();let t={timestamp:a.timeStamp,type:a.port.state,target:this};if(a.port.state==="connected"&&a.port.connection==="open"){a.port.type==="output"?t.port=this.getOutputById(a.port.id):a.port.type==="input"&&(t.port=this.getInputById(a.port.id)),this.emit(a.port.state,t);const e=Object.assign({},t);e.type="portschanged",this.emit(e.type,e)}else if(a.port.state==="disconnected"&&a.port.connection==="pending"){a.port.type==="input"?t.port=this.getInputById(a.port.id,{disconnected:!0}):a.port.type==="output"&&(t.port=this.getOutputById(a.port.id,{disconnected:!0})),this.emit(a.port.state,t);const e=Object.assign({},t);e.type="portschanged",this.emit(e.type,e)}}async _updateInputsAndOutputs(){return Promise.all([this._updateInputs(),this._updateOutputs()])}async _updateInputs(){if(!this.interface)return;for(let t=this._inputs.length-1;t>=0;t--){const e=this._inputs[t];Array.from(this.interface.inputs.values()).find(n=>n===e._midiInput)||(this._disconnectedInputs.push(e),this._inputs.splice(t,1))}let a=[];return this.interface.inputs.forEach(t=>{if(!this._inputs.find(e=>e._midiInput===t)){let e=this._disconnectedInputs.find(n=>n._midiInput===t);e||(e=new Ee(t)),this._inputs.push(e),a.push(e.open())}}),Promise.all(a)}async _updateOutputs(){if(!this.interface)return;for(let t=this._outputs.length-1;t>=0;t--){const e=this._outputs[t];Array.from(this.interface.outputs.values()).find(n=>n===e._midiOutput)||(this._disconnectedOutputs.push(e),this._outputs.splice(t,1))}let a=[];return this.interface.outputs.forEach(t=>{if(!this._outputs.find(e=>e._midiOutput===t)){let e=this._disconnectedOutputs.find(n=>n._midiOutput===t);e||(e=new F(t)),this._outputs.push(e),a.push(e.open())}}),Promise.all(a)}get enabled(){return this.interface!==null}get inputs(){return this._inputs}get isNode(){return this.validation&&console.warn("WebMidi.isNode has been deprecated. Use Utilities.isNode instead."),l.isNode}get isBrowser(){return this.validation&&console.warn("WebMidi.isBrowser has been deprecated. Use Utilities.isBrowser instead."),l.isBrowser}get octaveOffset(){return this._octaveOffset}set octaveOffset(a){if(this.validation&&(a=parseInt(a),isNaN(a)))throw new TypeError("The 'octaveOffset' property must be an integer.");this._octaveOffset=a}get outputs(){return this._outputs}get supported(){return typeof navigator<"u"&&!!navigator.requestMIDIAccess}get sysexEnabled(){return!(!this.interface||!this.interface.sysexEnabled)}get time(){return performance.now()}get version(){return"3.1.9"}get flavour(){return"cjs"}get CHANNEL_EVENTS(){return this.validation&&console.warn("The CHANNEL_EVENTS enum has been moved to Enumerations.CHANNEL_EVENTS."),i.CHANNEL_EVENTS}get MIDI_SYSTEM_MESSAGES(){return this.validation&&console.warn("The MIDI_SYSTEM_MESSAGES enum has been moved to Enumerations.SYSTEM_MESSAGES."),i.SYSTEM_MESSAGES}get MIDI_CHANNEL_MODE_MESSAGES(){return this.validation&&console.warn("The MIDI_CHANNEL_MODE_MESSAGES enum has been moved to Enumerations.CHANNEL_MODE_MESSAGES."),i.CHANNEL_MODE_MESSAGES}get MIDI_CONTROL_CHANGE_MESSAGES(){return this.validation&&console.warn("The MIDI_CONTROL_CHANGE_MESSAGES enum has been replaced by the Enumerations.CONTROL_CHANGE_MESSAGES array."),i.MIDI_CONTROL_CHANGE_MESSAGES}get MIDI_REGISTERED_PARAMETER(){return this.validation&&console.warn("The MIDI_REGISTERED_PARAMETER enum has been moved to Enumerations.REGISTERED_PARAMETERS."),i.REGISTERED_PARAMETERS}get NOTES(){return this.validation&&console.warn("The NOTES enum has been deprecated."),["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]}};o.constructor=null;function ge(a){let t,e,n,r,s;const c=a[2].default,d=ne(c,a,a[1],null);return{c(){t=_("div"),e=_("h2"),n=Q(a[0]),r=A(),d&&d.c(),this.h()},l(h){t=N(h,"DIV",{class:!0});var m=S(t);e=N(m,"H2",{class:!0});var u=S(e);n=J(u,a[0]),u.forEach(g),r=I(m),d&&d.l(m),m.forEach(g),this.h()},h(){p(e,"class","controls__title"),p(t,"class","controls__container")},m(h,m){T(h,t,m),f(t,e),f(e,n),f(t,r),d&&d.m(t,null),s=!0},p(h,[m]){(!s||m&1)&&X(n,h[0]),d&&d.p&&(!s||m&2)&&re(d,c,h,h[1],s?ae(c,h[1],m,null):se(h[1]),null)},i(h){s||(D(d,h),s=!0)},o(h){L(d,h),s=!1},d(h){h&&g(t),d&&d.d(h)}}}function be(a,t,e){let{$$slots:n={},$$scope:r}=t,{title:s}=t;return a.$$set=c=>{"title"in c&&e(0,s=c.title),"$$scope"in c&&e(1,r=c.$$scope)},[s,r,n]}class _e extends z{constructor(t){super(),$(this,t,be,ge,x,{title:0})}}const{document:U}=de;function Ne(a){let t,e,n,r;return t=new q({props:{title:"Cutoff",param:"0x51"}}),n=new q({props:{title:"Resonance",param:"0x53"}}),{c(){G(t.$$.fragment),e=A(),G(n.$$.fragment)},l(s){H(t.$$.fragment,s),e=I(s),H(n.$$.fragment,s)},m(s,c){k(t,s,c),T(s,e,c),k(n,s,c),r=!0},p:P,i(s){r||(D(t.$$.fragment,s),D(n.$$.fragment,s),r=!0)},o(s){L(t.$$.fragment,s),L(n.$$.fragment,s),r=!1},d(s){s&&g(e),V(t,s),V(n,s)}}}function ye(a){let t,e,n,r,s,c,d,h,m,u,E='<div><div>Program Change</div> <input id="prog-num" type="number" min="1" max="128" value="1"/></div> <div><div>Bank Change</div> <input id="bank-num" type="number" min="1" max="128" value="1"/></div>',w;return h=new _e({props:{title:"TVF",$$slots:{default:[Ne]},$$scope:{ctx:a}}}),{c(){t=_("meta"),e=A(),n=_("section"),r=_("div"),s=A(),c=_("div"),d=_("div"),G(h.$$.fragment),m=A(),u=_("div"),u.innerHTML=E,this.h()},l(b){const v=le("svelte-8gb88t",U.head);t=N(v,"META",{name:!0,content:!0}),v.forEach(g),e=I(b),n=N(b,"SECTION",{});var M=S(n);r=N(M,"DIV",{class:!0}),S(r).forEach(g),s=I(M),c=N(M,"DIV",{class:!0});var R=S(c);d=N(R,"DIV",{class:!0});var Y=S(d);H(h.$$.fragment,Y),Y.forEach(g),m=I(R),u=N(R,"DIV",{class:!0,"data-svelte-h":!0}),ce(u)!=="svelte-4qqv4u"&&(u.innerHTML=E),R.forEach(g),M.forEach(g),this.h()},h(){U.title="Home",p(t,"name","description"),p(t,"content","Svelte demo app"),p(r,"class","io"),p(d,"class","sliders"),p(u,"class","program-change"),p(c,"class","controls")},m(b,v){f(U.head,t),T(b,e,v),T(b,n,v),f(n,r),f(n,s),f(n,c),f(c,d),k(h,d,null),f(c,m),f(c,u),w=!0},p(b,[v]){const M={};v&8&&(M.$$scope={dirty:v,ctx:b}),h.$set(M)},i(b){w||(D(h.$$.fragment,b),w=!0)},o(b){L(h.$$.fragment,b),w=!1},d(b){b&&(g(e),g(n)),g(t),V(h)}}}function ve(a){ie(()=>{o.enable({sysex:!0}).then(r).catch(s=>console.error(s));function r(){let s;document!==void 0&&(s=document.querySelector(".io")),o.inputs.length<1?s.innerHTML+="No device detected.":(s.innerHTML+="<h2>MIDI Inputs</h2>",o.inputs.forEach((c,d)=>{s.innerHTML+=`${d===o.inputs.length-1?`${d}: ${c.name} <br><br>`:`${d}: ${c.name} <br>`}`}),s.innerHTML+="<h2>MIDI Outputs</h2>",o.outputs.forEach((c,d)=>{s.innerHTML+=`${d}: ${c.name} <br>`}))}});const t=(r,s,c)=>{o.outputs[r].sendSysex(65,[16,106,18,3,0,16,s,c.toString(16),22])},e=(r,s)=>{t(0,r,s)},n=(r,s)=>{o.outputs[r].sendProgramChange(s)};return j("sendSysexStringHandler",e),j("sendProgramChangeHandler",n),[]}class Ae extends z{constructor(t){super(),$(this,t,ve,ye,x,{})}}export{Ae as component,Me as universal};
